#!/usr/bin/env ruby

# Copyright (c) 2013, Groupon, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# Neither the name of GROUPON nor the names of its contributors may be
# used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This is a script which builds a MapReduce job, SCPs it to a machine, and starts a job with it

require 'trollop'
require 'cast'

p = Trollop::Parser.new do
  version 'mongo deep mapreduce'
  banner <<-EOS
  run <options> [job class] [target cluster] [job arguments]
  example: run com.groupon.mapreduce.mongo.MongoCount hadoopmachine1.com
  EOS

  opt :nobuild, "Don't build first", :short => 'x'
end

opt = Trollop::with_standard_exception_handling p do
  opt = p.parse ARGV
  raise Trollop::HelpNeeded if ARGV.size < 2
  opt
end

klass = ARGV[0]
host = ARGV[1]

jar = 'mongo-deep-mapreduce-jar-with-dependencies.jar'

unless opt[:nobuild]
  Cast::local "rm -f target/#{jar}"
  Cast::ensure_local "mvn clean package"
end

Cast::ensure_local "scp target/#{jar} #{host}:~"

args = ''
args = ARGV[(2)..-1].join(' ') if ARGV.size > 2

start = Time.now
job_cmd = "hadoop jar #{jar} #{klass} #{args}"

Cast::remote host, job_cmd

finish = Time.now
puts "MapReduce job took #{finish - start} seconds"

